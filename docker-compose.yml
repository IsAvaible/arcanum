services:
  frontend:
    container_name: frontend
    environment:
      - HUSKY=0
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/app
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    command: >
      sh -c "
      npm install &&
      npm run build-only &&
      cp -rf '/app/dist/.' '/usr/share/nginx/html/' &&
      nginx -g 'daemon off;'
      "

  node_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: node_backend
    ports:
      - "3000:3000"
    depends_on:
      - db
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/node_backend
      - ./backend/certs:/node_backend/certs
    networks:
      - shared_network
  llm-backend:
    build: llm_backend
    container_name: llm_backend
    image: "python:3.11-slim"
    ports:
      - "5001:5001"
    env_file:
      - ./llm_backend/.env
    volumes:
      - ./llm_backend:/llm_backend
      - qdrant-data:/llm_backend/qdrant-data
    depends_on:
      - node_backend
    working_dir: /llm_backend
    command: >
      sh -c "apt-get update && apt-get install -y ffmpeg && pip install --no-cache-dir -r ./requirements.txt && python main.py"
    networks:
      - shared_network
  db:
    build:
      context: ./backend/db
      dockerfile: Dockerfile
    container_name: postgres_db
    env_file: "./backend/.env"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - shared_network

volumes:
  postgres-data:
  qdrant-data:

networks:
  shared_network:
    driver: bridge