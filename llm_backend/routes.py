from flask import request, Blueprint

from app import app, sio
from generate import (
    generate,
    vector_db_save_cases,
    ask_question,
)
from vectorstore import QdrantVectorstore

routes = Blueprint("routes", __name__)

### Defining Routes

@app.route("/test", methods=["GET"])
def test():
    socket_id = request.args.get('socket_id')
    try:
        sio.emit(event="llm_message", data={"message": 'Test WebSocket Message...', "socket_id": socket_id})
        return "Success"
    except Exception as ex:
        return str(ex)

# generate_case: Endpoint to send all files so the LLM can analyze and process them
# returns json array containing one or more cases
@app.route("/generate_case", methods=["POST"])
def generate_case():
    if request.method == "POST":
        return generate(request)

# chat: Endpoint for searching Cases
# returns complete message generated by the LLM
# implements sockets so the Frontend receives tokens    
@app.route("/generate", methods=["POST"])
def ask_question_():
    if request.method == "POST":
        with QdrantVectorstore() as vectorstore:
            return ask_question(request,vectorstore)

@app.route("/save_to_vector_db", methods=["POST"])
def save_to_vector_db():
    if request.method == "POST":
        with QdrantVectorstore() as vectorstore:
            return vector_db_save_cases(request,vectorstore)
