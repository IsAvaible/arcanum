/* tslint:disable */
/* eslint-disable */
/**
 * Cases API
 * The Cases API allows you to manage cases by creating, retrieving, updating, and deleting them. It also supports file attachments associated with cases. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Case
 */
export interface Case {
    /**
     * 
     * @type {number}
     * @memberof Case
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'solution'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'assignee'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'case_type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'priority'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Case
     */
    'attachment'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface CasesIdPutRequest
 */
export interface CasesIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof CasesIdPutRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CasesIdPutRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CasesIdPutRequest
     */
    'solution'?: string;
    /**
     * 
     * @type {string}
     * @memberof CasesIdPutRequest
     */
    'assignee'?: string;
    /**
     * 
     * @type {string}
     * @memberof CasesIdPutRequest
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof CasesIdPutRequest
     */
    'case_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CasesIdPutRequest
     */
    'priority'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error message.
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all cases.
         * @summary Retrieve all cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download an attachment associated with a case.
         * @summary Download an attachment
         * @param {number} id ID of the case.
         * @param {string} filename Name of the attachment file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdAttachmentsFilenameGet: async (id: number, filename: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdAttachmentsFilenameGet', 'id', id)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('casesIdAttachmentsFilenameGet', 'filename', filename)
            const localVarPath = `/cases/{id}/attachments/{filename}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific case by its ID.
         * @summary Delete a case by ID
         * @param {number} id ID of the case to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdDelete', 'id', id)
            const localVarPath = `/cases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific case by its ID.
         * @summary Retrieve a case by ID
         * @param {number} id ID of the case to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdGet', 'id', id)
            const localVarPath = `/cases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing case by its ID.
         * @summary Update a case by ID
         * @param {number} id ID of the case to update.
         * @param {CasesIdPutRequest} casesIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdPut: async (id: number, casesIdPutRequest: CasesIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdPut', 'id', id)
            // verify required parameter 'casesIdPutRequest' is not null or undefined
            assertParamExists('casesIdPut', 'casesIdPutRequest', casesIdPutRequest)
            const localVarPath = `/cases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(casesIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new case.
         * @summary Create a new case
         * @param {string} [title] Title of the case.
         * @param {string} [description] Description of the case.
         * @param {string} [solution] Solution for the case.
         * @param {string} [assignee] Person responsible for the case.
         * @param {string} [status] Status of the case.
         * @param {string} [caseType] Type of the case.
         * @param {string} [priority] Priority level of the case.
         * @param {Array<File>} [files] Files to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesPost: async (title?: string, description?: string, solution?: string, assignee?: string, status?: string, caseType?: string, priority?: string, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (solution !== undefined) { 
                localVarFormParams.append('solution', solution as any);
            }
    
            if (assignee !== undefined) { 
                localVarFormParams.append('assignee', assignee as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.append('status', status as any);
            }
    
            if (caseType !== undefined) { 
                localVarFormParams.append('case_type', caseType as any);
            }
    
            if (priority !== undefined) { 
                localVarFormParams.append('priority', priority as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all cases.
         * @summary Retrieve all cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Case>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Download an attachment associated with a case.
         * @summary Download an attachment
         * @param {number} id ID of the case.
         * @param {string} filename Name of the attachment file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdAttachmentsFilenameGet(id: number, filename: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdAttachmentsFilenameGet(id, filename, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdAttachmentsFilenameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific case by its ID.
         * @summary Delete a case by ID
         * @param {number} id ID of the case to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific case by its ID.
         * @summary Retrieve a case by ID
         * @param {number} id ID of the case to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing case by its ID.
         * @summary Update a case by ID
         * @param {number} id ID of the case to update.
         * @param {CasesIdPutRequest} casesIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdPut(id: number, casesIdPutRequest: CasesIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdPut(id, casesIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new case.
         * @summary Create a new case
         * @param {string} [title] Title of the case.
         * @param {string} [description] Description of the case.
         * @param {string} [solution] Solution for the case.
         * @param {string} [assignee] Person responsible for the case.
         * @param {string} [status] Status of the case.
         * @param {string} [caseType] Type of the case.
         * @param {string} [priority] Priority level of the case.
         * @param {Array<File>} [files] Files to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesPost(title?: string, description?: string, solution?: string, assignee?: string, status?: string, caseType?: string, priority?: string, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesPost(title, description, solution, assignee, status, caseType, priority, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Retrieve a list of all cases.
         * @summary Retrieve all cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Case>> {
            return localVarFp.casesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Download an attachment associated with a case.
         * @summary Download an attachment
         * @param {number} id ID of the case.
         * @param {string} filename Name of the attachment file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdAttachmentsFilenameGet(id: number, filename: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.casesIdAttachmentsFilenameGet(id, filename, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific case by its ID.
         * @summary Delete a case by ID
         * @param {number} id ID of the case to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.casesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific case by its ID.
         * @summary Retrieve a case by ID
         * @param {number} id ID of the case to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.casesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing case by its ID.
         * @summary Update a case by ID
         * @param {number} id ID of the case to update.
         * @param {CasesIdPutRequest} casesIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdPut(id: number, casesIdPutRequest: CasesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.casesIdPut(id, casesIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new case.
         * @summary Create a new case
         * @param {string} [title] Title of the case.
         * @param {string} [description] Description of the case.
         * @param {string} [solution] Solution for the case.
         * @param {string} [assignee] Person responsible for the case.
         * @param {string} [status] Status of the case.
         * @param {string} [caseType] Type of the case.
         * @param {string} [priority] Priority level of the case.
         * @param {Array<File>} [files] Files to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesPost(title?: string, description?: string, solution?: string, assignee?: string, status?: string, caseType?: string, priority?: string, files?: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.casesPost(title, description, solution, assignee, status, caseType, priority, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retrieve a list of all cases.
     * @summary Retrieve all cases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download an attachment associated with a case.
     * @summary Download an attachment
     * @param {number} id ID of the case.
     * @param {string} filename Name of the attachment file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdAttachmentsFilenameGet(id: number, filename: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdAttachmentsFilenameGet(id, filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific case by its ID.
     * @summary Delete a case by ID
     * @param {number} id ID of the case to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific case by its ID.
     * @summary Retrieve a case by ID
     * @param {number} id ID of the case to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing case by its ID.
     * @summary Update a case by ID
     * @param {number} id ID of the case to update.
     * @param {CasesIdPutRequest} casesIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdPut(id: number, casesIdPutRequest: CasesIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdPut(id, casesIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new case.
     * @summary Create a new case
     * @param {string} [title] Title of the case.
     * @param {string} [description] Description of the case.
     * @param {string} [solution] Solution for the case.
     * @param {string} [assignee] Person responsible for the case.
     * @param {string} [status] Status of the case.
     * @param {string} [caseType] Type of the case.
     * @param {string} [priority] Priority level of the case.
     * @param {Array<File>} [files] Files to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesPost(title?: string, description?: string, solution?: string, assignee?: string, status?: string, caseType?: string, priority?: string, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesPost(title, description, solution, assignee, status, caseType, priority, files, options).then((request) => request(this.axios, this.basePath));
    }
}



