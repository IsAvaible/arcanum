/* tslint:disable */
/* eslint-disable */
/**
 * Oculavis Arcanum API
 * The Oculavis Arcanum API allows you to manage cases by creating, retrieving, updating, and deleting them. It also supports file attachments associated with cases.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface Case
 */
export interface Case {
    /**
     * Title of the case.
     * @type {string}
     * @memberof Case
     */
    'title': string;
    /**
     * Description of the case.
     * @type {string}
     * @memberof Case
     */
    'description': string;
    /**
     * Solution for the case.
     * @type {string}
     * @memberof Case
     */
    'solution'?: string;
    /**
     * Person responsible for the case.
     * @type {Array<string>}
     * @memberof Case
     */
    'assignee'?: Array<string>;
    /**
     * Status of the case.
     * @type {string}
     * @memberof Case
     */
    'status'?: CaseStatusEnum;
    /**
     * Type of the case.
     * @type {string}
     * @memberof Case
     */
    'case_type'?: CaseCaseTypeEnum;
    /**
     * Priority level of the case.
     * @type {string}
     * @memberof Case
     */
    'priority'?: CasePriorityEnum;
    /**
     * ID of the case.
     * @type {number}
     * @memberof Case
     */
    'id': number;
    /**
     * Indicates whether the case is a draft.
     * @type {boolean}
     * @memberof Case
     */
    'draft': boolean;
    /**
     * Date and time the case was created.
     * @type {string}
     * @memberof Case
     */
    'createdAt': string;
    /**
     * Date and time the case was last updated.
     * @type {string}
     * @memberof Case
     */
    'updatedAt': string;
    /**
     * List of file names attached to the case.
     * @type {Array<CaseAllOfAttachments>}
     * @memberof Case
     */
    'attachments': Array<CaseAllOfAttachments>;
}

export const CaseStatusEnum = {
    Open: 'Open',
    InProgress: 'In Progress',
    Solved: 'Solved',
    Closed: 'Closed'
} as const;

export type CaseStatusEnum = typeof CaseStatusEnum[keyof typeof CaseStatusEnum];
export const CaseCaseTypeEnum = {
    Problem: 'Problem',
    Incident: 'Incident',
    Change: 'Change',
    Faq: 'FAQ'
} as const;

export type CaseCaseTypeEnum = typeof CaseCaseTypeEnum[keyof typeof CaseCaseTypeEnum];
export const CasePriorityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    High: 'High'
} as const;

export type CasePriorityEnum = typeof CasePriorityEnum[keyof typeof CasePriorityEnum];

/**
 *
 * @export
 * @interface CaseAllOfAttachments
 */
export interface CaseAllOfAttachments {
    /**
     * ID of the attachment.
     * @type {number}
     * @memberof CaseAllOfAttachments
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof CaseAllOfAttachments
     */
    'filename': string;
    /**
     * Path to the attachment file.
     * @type {string}
     * @memberof CaseAllOfAttachments
     */
    'filepath': string;
    /**
     * Hash of the attachment file.
     * @type {string}
     * @memberof CaseAllOfAttachments
     */
    'filehash': string;
    /**
     * MIME type of the attachment file.
     * @type {string}
     * @memberof CaseAllOfAttachments
     */
    'mimetype': string;
    /**
     * Size of the attachment file in bytes.
     * @type {number}
     * @memberof CaseAllOfAttachments
     */
    'size': number;
    /**
     *
     * @type {string}
     * @memberof CaseAllOfAttachments
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof CaseAllOfAttachments
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface CaseBase
 */
export interface CaseBase {
    /**
     * Title of the case.
     * @type {string}
     * @memberof CaseBase
     */
    'title': string;
    /**
     * Description of the case.
     * @type {string}
     * @memberof CaseBase
     */
    'description': string;
    /**
     * Solution for the case.
     * @type {string}
     * @memberof CaseBase
     */
    'solution'?: string;
    /**
     * Person responsible for the case.
     * @type {Array<string>}
     * @memberof CaseBase
     */
    'assignee'?: Array<string>;
    /**
     * Status of the case.
     * @type {string}
     * @memberof CaseBase
     */
    'status'?: CaseBaseStatusEnum;
    /**
     * Type of the case.
     * @type {string}
     * @memberof CaseBase
     */
    'case_type'?: CaseBaseCaseTypeEnum;
    /**
     * Priority level of the case.
     * @type {string}
     * @memberof CaseBase
     */
    'priority'?: CaseBasePriorityEnum;
}

export const CaseBaseStatusEnum = {
    Open: 'Open',
    InProgress: 'In Progress',
    Solved: 'Solved',
    Closed: 'Closed'
} as const;

export type CaseBaseStatusEnum = typeof CaseBaseStatusEnum[keyof typeof CaseBaseStatusEnum];
export const CaseBaseCaseTypeEnum = {
    Problem: 'Problem',
    Incident: 'Incident',
    Change: 'Change',
    Faq: 'FAQ'
} as const;

export type CaseBaseCaseTypeEnum = typeof CaseBaseCaseTypeEnum[keyof typeof CaseBaseCaseTypeEnum];
export const CaseBasePriorityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    High: 'High'
} as const;

export type CaseBasePriorityEnum = typeof CaseBasePriorityEnum[keyof typeof CaseBasePriorityEnum];

/**
 *
 * @export
 * @interface CasePut
 */
export interface CasePut {
    /**
     * Title of the case.
     * @type {string}
     * @memberof CasePut
     */
    'title': string;
    /**
     * Description of the case.
     * @type {string}
     * @memberof CasePut
     */
    'description': string;
    /**
     * Solution for the case.
     * @type {string}
     * @memberof CasePut
     */
    'solution'?: string;
    /**
     * Person responsible for the case.
     * @type {Array<string>}
     * @memberof CasePut
     */
    'assignee'?: Array<string>;
    /**
     * Status of the case.
     * @type {string}
     * @memberof CasePut
     */
    'status'?: CasePutStatusEnum;
    /**
     * Type of the case.
     * @type {string}
     * @memberof CasePut
     */
    'case_type'?: CasePutCaseTypeEnum;
    /**
     * Priority level of the case.
     * @type {string}
     * @memberof CasePut
     */
    'priority'?: CasePutPriorityEnum;
    /**
     * Attached files on upload.
     * @type {Array<File>}
     * @memberof CasePut
     */
    'files'?: Array<File>;
}

export const CasePutStatusEnum = {
    Open: 'Open',
    InProgress: 'In Progress',
    Solved: 'Solved',
    Closed: 'Closed'
} as const;

export type CasePutStatusEnum = typeof CasePutStatusEnum[keyof typeof CasePutStatusEnum];
export const CasePutCaseTypeEnum = {
    Problem: 'Problem',
    Incident: 'Incident',
    Change: 'Change',
    Faq: 'FAQ'
} as const;

export type CasePutCaseTypeEnum = typeof CasePutCaseTypeEnum[keyof typeof CasePutCaseTypeEnum];
export const CasePutPriorityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    High: 'High'
} as const;

export type CasePutPriorityEnum = typeof CasePutPriorityEnum[keyof typeof CasePutPriorityEnum];

/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error message.
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
    /**
     * HTTP status code for the error.
     * @type {number}
     * @memberof ModelError
     */
    'code'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all cases.
         * @summary Retrieve all cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an attachment associated with a case.
         * @summary Delete an attachment
         * @param {number} id ID of the case.
         * @param {number} fileId ID of the attachment file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdAttachmentsFileIdDelete: async (id: number, fileId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdAttachmentsFileIdDelete', 'id', id)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('casesIdAttachmentsFileIdDelete', 'fileId', fileId)
            const localVarPath = `/cases/{id}/attachments/{fileId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download an attachment associated with a case.
         * @summary Download an attachment
         * @param {number} id ID of the case.
         * @param {number} fileId ID of the attachment file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdAttachmentsFileIdGet: async (id: number, fileId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdAttachmentsFileIdGet', 'id', id)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('casesIdAttachmentsFileIdGet', 'fileId', fileId)
            const localVarPath = `/cases/{id}/attachments/{fileId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload one or more files as attachments for a specific case.
         * @summary Upload attachments for a case
         * @param {number} id ID of the case to which the files will be attached.
         * @param {Array<File>} [files] Files to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdAttachmentsPost: async (id: number, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdAttachmentsPost', 'id', id)
            const localVarPath = `/cases/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }



            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific case by its ID.
         * @summary Delete a case by ID
         * @param {number} id ID of the case to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdDelete', 'id', id)
            const localVarPath = `/cases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific case by its ID.
         * @summary Retrieve a case by ID
         * @param {number} id ID of the case to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdGet', 'id', id)
            const localVarPath = `/cases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing case by its ID.
         * @summary Update a case by ID
         * @param {number} id ID of the case to update.
         * @param {string} title Title of the case.
         * @param {string} description Description of the case.
         * @param {string} [solution] Solution for the case.
         * @param {Array<string>} [assignee] Person responsible for the case.
         * @param {CasesIdPutStatusEnum} [status] Status of the case.
         * @param {CasesIdPutCaseTypeEnum} [caseType] Type of the case.
         * @param {CasesIdPutPriorityEnum} [priority] Priority level of the case.
         * @param {Array<File>} [files] Attached files on upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdPut: async (id: number, title: string, description: string, solution?: string, assignee?: Array<string>, status?: CasesIdPutStatusEnum, caseType?: CasesIdPutCaseTypeEnum, priority?: CasesIdPutPriorityEnum, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('casesIdPut', 'id', id)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('casesIdPut', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('casesIdPut', 'description', description)
            const localVarPath = `/cases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (title !== undefined) {
                localVarFormParams.append('title', title as any);
            }

            if (description !== undefined) {
                localVarFormParams.append('description', description as any);
            }

            if (solution !== undefined) {
                localVarFormParams.append('solution', solution as any);
            }
                if (assignee) {
                localVarFormParams.append('assignee', assignee.join(COLLECTION_FORMATS.csv));
            }


            if (status !== undefined) {
                localVarFormParams.append('status', status as any);
            }

            if (caseType !== undefined) {
                localVarFormParams.append('case_type', caseType as any);
            }

            if (priority !== undefined) {
                localVarFormParams.append('priority', priority as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }



            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new case.
         * @summary Create a new case
         * @param {string} title Title of the case.
         * @param {string} description Description of the case.
         * @param {string} [solution] Solution for the case.
         * @param {Array<string>} [assignee] Person responsible for the case.
         * @param {CasesPostStatusEnum} [status] Status of the case.
         * @param {CasesPostCaseTypeEnum} [caseType] Type of the case.
         * @param {CasesPostPriorityEnum} [priority] Priority level of the case.
         * @param {Array<File>} [files] Attached files on upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesPost: async (title: string, description: string, solution?: string, assignee?: Array<string>, status?: CasesPostStatusEnum, caseType?: CasesPostCaseTypeEnum, priority?: CasesPostPriorityEnum, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('casesPost', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('casesPost', 'description', description)
            const localVarPath = `/cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (title !== undefined) {
                localVarFormParams.append('title', title as any);
            }

            if (description !== undefined) {
                localVarFormParams.append('description', description as any);
            }

            if (solution !== undefined) {
                localVarFormParams.append('solution', solution as any);
            }
                if (assignee) {
                localVarFormParams.append('assignee', assignee.join(COLLECTION_FORMATS.csv));
            }


            if (status !== undefined) {
                localVarFormParams.append('status', status as any);
            }

            if (caseType !== undefined) {
                localVarFormParams.append('case_type', caseType as any);
            }

            if (priority !== undefined) {
                localVarFormParams.append('priority', priority as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }



            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a draft case with additional details and mark it as confirmed.
         * @summary Confirm and update a draft case.
         * @param {number} id ID of the case to confirm.
         * @param {CasePut} casePut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCaseIdPut: async (id: number, casePut: CasePut, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('confirmCaseIdPut', 'id', id)
            // verify required parameter 'casePut' is not null or undefined
            assertParamExists('confirmCaseIdPut', 'casePut', casePut)
            const localVarPath = `/confirmCase/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(casePut, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload files, process them, and create draft cases.
         * @summary Create cases from uploaded files.
         * @param {Array<File>} [files] Files to be uploaded.
         * @param {number} [socketId] Socket ID for real-time communication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCaseFromFilesPost: async (files?: Array<File>, socketId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createCaseFromFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }


            if (socketId !== undefined) {
                localVarFormParams.append('socket_id', socketId as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all cases.
         * @summary Retrieve all cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Case>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an attachment associated with a case.
         * @summary Delete an attachment
         * @param {number} id ID of the case.
         * @param {number} fileId ID of the attachment file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdAttachmentsFileIdDelete(id: number, fileId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdAttachmentsFileIdDelete(id, fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdAttachmentsFileIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Download an attachment associated with a case.
         * @summary Download an attachment
         * @param {number} id ID of the case.
         * @param {number} fileId ID of the attachment file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdAttachmentsFileIdGet(id: number, fileId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdAttachmentsFileIdGet(id, fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdAttachmentsFileIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload one or more files as attachments for a specific case.
         * @summary Upload attachments for a case
         * @param {number} id ID of the case to which the files will be attached.
         * @param {Array<File>} [files] Files to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdAttachmentsPost(id: number, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdAttachmentsPost(id, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdAttachmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific case by its ID.
         * @summary Delete a case by ID
         * @param {number} id ID of the case to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific case by its ID.
         * @summary Retrieve a case by ID
         * @param {number} id ID of the case to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing case by its ID.
         * @summary Update a case by ID
         * @param {number} id ID of the case to update.
         * @param {string} title Title of the case.
         * @param {string} description Description of the case.
         * @param {string} [solution] Solution for the case.
         * @param {Array<string>} [assignee] Person responsible for the case.
         * @param {CasesIdPutStatusEnum} [status] Status of the case.
         * @param {CasesIdPutCaseTypeEnum} [caseType] Type of the case.
         * @param {CasesIdPutPriorityEnum} [priority] Priority level of the case.
         * @param {Array<File>} [files] Attached files on upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesIdPut(id: number, title: string, description: string, solution?: string, assignee?: Array<string>, status?: CasesIdPutStatusEnum, caseType?: CasesIdPutCaseTypeEnum, priority?: CasesIdPutPriorityEnum, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesIdPut(id, title, description, solution, assignee, status, caseType, priority, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new case.
         * @summary Create a new case
         * @param {string} title Title of the case.
         * @param {string} description Description of the case.
         * @param {string} [solution] Solution for the case.
         * @param {Array<string>} [assignee] Person responsible for the case.
         * @param {CasesPostStatusEnum} [status] Status of the case.
         * @param {CasesPostCaseTypeEnum} [caseType] Type of the case.
         * @param {CasesPostPriorityEnum} [priority] Priority level of the case.
         * @param {Array<File>} [files] Attached files on upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casesPost(title: string, description: string, solution?: string, assignee?: Array<string>, status?: CasesPostStatusEnum, caseType?: CasesPostCaseTypeEnum, priority?: CasesPostPriorityEnum, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casesPost(title, description, solution, assignee, status, caseType, priority, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.casesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a draft case with additional details and mark it as confirmed.
         * @summary Confirm and update a draft case.
         * @param {number} id ID of the case to confirm.
         * @param {CasePut} casePut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmCaseIdPut(id: number, casePut: CasePut, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Case>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmCaseIdPut(id, casePut, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.confirmCaseIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload files, process them, and create draft cases.
         * @summary Create cases from uploaded files.
         * @param {Array<File>} [files] Files to be uploaded.
         * @param {number} [socketId] Socket ID for real-time communication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCaseFromFilesPost(files?: Array<File>, socketId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Case>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCaseFromFilesPost(files, socketId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCaseFromFilesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Retrieve a list of all cases.
         * @summary Retrieve all cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Case>> {
            return localVarFp.casesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an attachment associated with a case.
         * @summary Delete an attachment
         * @param {DefaultApiCasesIdAttachmentsFileIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdAttachmentsFileIdDelete(requestParameters: DefaultApiCasesIdAttachmentsFileIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.casesIdAttachmentsFileIdDelete(requestParameters.id, requestParameters.fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Download an attachment associated with a case.
         * @summary Download an attachment
         * @param {DefaultApiCasesIdAttachmentsFileIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdAttachmentsFileIdGet(requestParameters: DefaultApiCasesIdAttachmentsFileIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.casesIdAttachmentsFileIdGet(requestParameters.id, requestParameters.fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload one or more files as attachments for a specific case.
         * @summary Upload attachments for a case
         * @param {DefaultApiCasesIdAttachmentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdAttachmentsPost(requestParameters: DefaultApiCasesIdAttachmentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.casesIdAttachmentsPost(requestParameters.id, requestParameters.files, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific case by its ID.
         * @summary Delete a case by ID
         * @param {DefaultApiCasesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdDelete(requestParameters: DefaultApiCasesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.casesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific case by its ID.
         * @summary Retrieve a case by ID
         * @param {DefaultApiCasesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdGet(requestParameters: DefaultApiCasesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.casesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing case by its ID.
         * @summary Update a case by ID
         * @param {DefaultApiCasesIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesIdPut(requestParameters: DefaultApiCasesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.casesIdPut(requestParameters.id, requestParameters.title, requestParameters.description, requestParameters.solution, requestParameters.assignee, requestParameters.status, requestParameters.caseType, requestParameters.priority, requestParameters.files, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new case.
         * @summary Create a new case
         * @param {DefaultApiCasesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casesPost(requestParameters: DefaultApiCasesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.casesPost(requestParameters.title, requestParameters.description, requestParameters.solution, requestParameters.assignee, requestParameters.status, requestParameters.caseType, requestParameters.priority, requestParameters.files, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a draft case with additional details and mark it as confirmed.
         * @summary Confirm and update a draft case.
         * @param {DefaultApiConfirmCaseIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCaseIdPut(requestParameters: DefaultApiConfirmCaseIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Case> {
            return localVarFp.confirmCaseIdPut(requestParameters.id, requestParameters.casePut, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload files, process them, and create draft cases.
         * @summary Create cases from uploaded files.
         * @param {DefaultApiCreateCaseFromFilesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCaseFromFilesPost(requestParameters: DefaultApiCreateCaseFromFilesPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Case>> {
            return localVarFp.createCaseFromFilesPost(requestParameters.files, requestParameters.socketId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for casesIdAttachmentsFileIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiCasesIdAttachmentsFileIdDeleteRequest
 */
export interface DefaultApiCasesIdAttachmentsFileIdDeleteRequest {
    /**
     * ID of the case.
     * @type {number}
     * @memberof DefaultApiCasesIdAttachmentsFileIdDelete
     */
    readonly id: number

    /**
     * ID of the attachment file.
     * @type {number}
     * @memberof DefaultApiCasesIdAttachmentsFileIdDelete
     */
    readonly fileId: number
}

/**
 * Request parameters for casesIdAttachmentsFileIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCasesIdAttachmentsFileIdGetRequest
 */
export interface DefaultApiCasesIdAttachmentsFileIdGetRequest {
    /**
     * ID of the case.
     * @type {number}
     * @memberof DefaultApiCasesIdAttachmentsFileIdGet
     */
    readonly id: number

    /**
     * ID of the attachment file.
     * @type {number}
     * @memberof DefaultApiCasesIdAttachmentsFileIdGet
     */
    readonly fileId: number
}

/**
 * Request parameters for casesIdAttachmentsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiCasesIdAttachmentsPostRequest
 */
export interface DefaultApiCasesIdAttachmentsPostRequest {
    /**
     * ID of the case to which the files will be attached.
     * @type {number}
     * @memberof DefaultApiCasesIdAttachmentsPost
     */
    readonly id: number

    /**
     * Files to upload.
     * @type {Array<File>}
     * @memberof DefaultApiCasesIdAttachmentsPost
     */
    readonly files?: Array<File>
}

/**
 * Request parameters for casesIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiCasesIdDeleteRequest
 */
export interface DefaultApiCasesIdDeleteRequest {
    /**
     * ID of the case to delete.
     * @type {number}
     * @memberof DefaultApiCasesIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for casesIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiCasesIdGetRequest
 */
export interface DefaultApiCasesIdGetRequest {
    /**
     * ID of the case to retrieve.
     * @type {number}
     * @memberof DefaultApiCasesIdGet
     */
    readonly id: number
}

/**
 * Request parameters for casesIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiCasesIdPutRequest
 */
export interface DefaultApiCasesIdPutRequest {
    /**
     * ID of the case to update.
     * @type {number}
     * @memberof DefaultApiCasesIdPut
     */
    readonly id: number

    /**
     * Title of the case.
     * @type {string}
     * @memberof DefaultApiCasesIdPut
     */
    readonly title: string

    /**
     * Description of the case.
     * @type {string}
     * @memberof DefaultApiCasesIdPut
     */
    readonly description: string

    /**
     * Solution for the case.
     * @type {string}
     * @memberof DefaultApiCasesIdPut
     */
    readonly solution?: string

    /**
     * Person responsible for the case.
     * @type {Array<string>}
     * @memberof DefaultApiCasesIdPut
     */
    readonly assignee?: Array<string>

    /**
     * Status of the case.
     * @type {string}
     * @memberof DefaultApiCasesIdPut
     */
    readonly status?: CasesIdPutStatusEnum

    /**
     * Type of the case.
     * @type {string}
     * @memberof DefaultApiCasesIdPut
     */
    readonly caseType?: CasesIdPutCaseTypeEnum

    /**
     * Priority level of the case.
     * @type {string}
     * @memberof DefaultApiCasesIdPut
     */
    readonly priority?: CasesIdPutPriorityEnum

    /**
     * Attached files on upload.
     * @type {Array<File>}
     * @memberof DefaultApiCasesIdPut
     */
    readonly files?: Array<File>
}

/**
 * Request parameters for casesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiCasesPostRequest
 */
export interface DefaultApiCasesPostRequest {
    /**
     * Title of the case.
     * @type {string}
     * @memberof DefaultApiCasesPost
     */
    readonly title: string

    /**
     * Description of the case.
     * @type {string}
     * @memberof DefaultApiCasesPost
     */
    readonly description: string

    /**
     * Solution for the case.
     * @type {string}
     * @memberof DefaultApiCasesPost
     */
    readonly solution?: string

    /**
     * Person responsible for the case.
     * @type {Array<string>}
     * @memberof DefaultApiCasesPost
     */
    readonly assignee?: Array<string>

    /**
     * Status of the case.
     * @type {string}
     * @memberof DefaultApiCasesPost
     */
    readonly status?: CasesPostStatusEnum

    /**
     * Type of the case.
     * @type {string}
     * @memberof DefaultApiCasesPost
     */
    readonly caseType?: CasesPostCaseTypeEnum

    /**
     * Priority level of the case.
     * @type {string}
     * @memberof DefaultApiCasesPost
     */
    readonly priority?: CasesPostPriorityEnum

    /**
     * Attached files on upload.
     * @type {Array<File>}
     * @memberof DefaultApiCasesPost
     */
    readonly files?: Array<File>
}

/**
 * Request parameters for confirmCaseIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiConfirmCaseIdPutRequest
 */
export interface DefaultApiConfirmCaseIdPutRequest {
    /**
     * ID of the case to confirm.
     * @type {number}
     * @memberof DefaultApiConfirmCaseIdPut
     */
    readonly id: number

    /**
     *
     * @type {CasePut}
     * @memberof DefaultApiConfirmCaseIdPut
     */
    readonly casePut: CasePut
}

/**
 * Request parameters for createCaseFromFilesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateCaseFromFilesPostRequest
 */
export interface DefaultApiCreateCaseFromFilesPostRequest {
    /**
     * Files to be uploaded.
     * @type {Array<File>}
     * @memberof DefaultApiCreateCaseFromFilesPost
     */
    readonly files?: Array<File>

    /**
     * Socket ID for real-time communication.
     * @type {number}
     * @memberof DefaultApiCreateCaseFromFilesPost
     */
    readonly socketId?: number
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retrieve a list of all cases.
     * @summary Retrieve all cases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an attachment associated with a case.
     * @summary Delete an attachment
     * @param {DefaultApiCasesIdAttachmentsFileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdAttachmentsFileIdDelete(requestParameters: DefaultApiCasesIdAttachmentsFileIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdAttachmentsFileIdDelete(requestParameters.id, requestParameters.fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download an attachment associated with a case.
     * @summary Download an attachment
     * @param {DefaultApiCasesIdAttachmentsFileIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdAttachmentsFileIdGet(requestParameters: DefaultApiCasesIdAttachmentsFileIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdAttachmentsFileIdGet(requestParameters.id, requestParameters.fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload one or more files as attachments for a specific case.
     * @summary Upload attachments for a case
     * @param {DefaultApiCasesIdAttachmentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdAttachmentsPost(requestParameters: DefaultApiCasesIdAttachmentsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdAttachmentsPost(requestParameters.id, requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific case by its ID.
     * @summary Delete a case by ID
     * @param {DefaultApiCasesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdDelete(requestParameters: DefaultApiCasesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific case by its ID.
     * @summary Retrieve a case by ID
     * @param {DefaultApiCasesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdGet(requestParameters: DefaultApiCasesIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing case by its ID.
     * @summary Update a case by ID
     * @param {DefaultApiCasesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesIdPut(requestParameters: DefaultApiCasesIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesIdPut(requestParameters.id, requestParameters.title, requestParameters.description, requestParameters.solution, requestParameters.assignee, requestParameters.status, requestParameters.caseType, requestParameters.priority, requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new case.
     * @summary Create a new case
     * @param {DefaultApiCasesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public casesPost(requestParameters: DefaultApiCasesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).casesPost(requestParameters.title, requestParameters.description, requestParameters.solution, requestParameters.assignee, requestParameters.status, requestParameters.caseType, requestParameters.priority, requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a draft case with additional details and mark it as confirmed.
     * @summary Confirm and update a draft case.
     * @param {DefaultApiConfirmCaseIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public confirmCaseIdPut(requestParameters: DefaultApiConfirmCaseIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).confirmCaseIdPut(requestParameters.id, requestParameters.casePut, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload files, process them, and create draft cases.
     * @summary Create cases from uploaded files.
     * @param {DefaultApiCreateCaseFromFilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCaseFromFilesPost(requestParameters: DefaultApiCreateCaseFromFilesPostRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCaseFromFilesPost(requestParameters.files, requestParameters.socketId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CasesIdPutStatusEnum = {
    Open: 'Open',
    InProgress: 'In Progress',
    Solved: 'Solved',
    Closed: 'Closed'
} as const;
export type CasesIdPutStatusEnum = typeof CasesIdPutStatusEnum[keyof typeof CasesIdPutStatusEnum];
/**
 * @export
 */
export const CasesIdPutCaseTypeEnum = {
    Problem: 'Problem',
    Incident: 'Incident',
    Change: 'Change',
    Faq: 'FAQ'
} as const;
export type CasesIdPutCaseTypeEnum = typeof CasesIdPutCaseTypeEnum[keyof typeof CasesIdPutCaseTypeEnum];
/**
 * @export
 */
export const CasesIdPutPriorityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    High: 'High'
} as const;
export type CasesIdPutPriorityEnum = typeof CasesIdPutPriorityEnum[keyof typeof CasesIdPutPriorityEnum];
/**
 * @export
 */
export const CasesPostStatusEnum = {
    Open: 'Open',
    InProgress: 'In Progress',
    Solved: 'Solved',
    Closed: 'Closed'
} as const;
export type CasesPostStatusEnum = typeof CasesPostStatusEnum[keyof typeof CasesPostStatusEnum];
/**
 * @export
 */
export const CasesPostCaseTypeEnum = {
    Problem: 'Problem',
    Incident: 'Incident',
    Change: 'Change',
    Faq: 'FAQ'
} as const;
export type CasesPostCaseTypeEnum = typeof CasesPostCaseTypeEnum[keyof typeof CasesPostCaseTypeEnum];
/**
 * @export
 */
export const CasesPostPriorityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    High: 'High'
} as const;
export type CasesPostPriorityEnum = typeof CasesPostPriorityEnum[keyof typeof CasesPostPriorityEnum];


